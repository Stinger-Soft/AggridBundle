{
	{% block grid_def_start %}
	{% endblock grid_def_start %}
	{% import '@StingerSoftAggrid/Grid/macros.html.twig' as me %}
	columnDefs: [
	{% for column in grid.columns %}
		{% include column.template with {'column': column} %}{% if not loop.last %},{% endif %}
	{% endfor %}
	],
	multiSortKey: 'ctrl',
	enableBrowserTooltips: {{ grid.vars.enableBrowserTooltips|json_encode|raw }},
	enableRangeSelection: {{ grid.vars.enableRangeSelection|json_encode|raw }},
	components: {
		datePicker: StingerSoftAggrid.Editor.DatePicker
		{% for componentAlias, component in grid.additionalComponents %}
		, {{ componentAlias }}: {{ component }}
		{% endfor %}
	}
	{% if grid.statusBarComponents|length > 0 %}
	, statusBar: {
		statusPanels: [
		{% for statusBarComponent in grid.statusBarComponents %}
			{% include statusBarComponent.template with {'component': statusBarComponent} %}{% if not loop.last %},{% endif %}
		{% endfor %}
		]
	}
	{% endif %}
	{% if grid.sideBarComponents|length > 0 or grid.vars.sideBar != false %}
		{% if grid.sideBarComponents|length > 0 %}
		, sideBar: {
			{% if grid.vars.sideBarOptions.defaultToolPanel is not null %}
			defaultToolPanel: {{ grid.vars.sideBarOptions.defaultToolPanel|json_encode|raw }},
			{% endif %}
			{% if grid.vars.sideBarOptions.position is not null %}
			position: {{ grid.vars.sideBarOptions.position|json_encode|raw }},
			{% endif %}
			{% if grid.vars.sideBarOptions.hiddenByDefault is not null %}
			hiddenByDefault: {{ grid.vars.sideBarOptions.hiddenByDefault|json_encode|raw }},
			{% endif %}
			toolPanels: [
			{% for sideBarComponent in grid.sideBarComponents %}
				{% include sideBarComponent.template with {'component': sideBarComponent} %}{% if not loop.last %},{% endif %}
			{% endfor %}
			]
		}
		{% elseif grid.vars.sideBar != false %}
			, sideBar: {{ grid.vars.sideBar|json_encode|raw }}
		{% endif %}
	{% endif %}
	{% if grid.vars.rowStyle is defined and grid.vars.rowStyle is not same as(null) %}
	, rowStyle: {{ grid.vars.rowStyle|json_encode|raw }}
	{% endif %}
	{% if grid.vars.getRowNodeId is defined and grid.vars.getRowNodeId is not same as(null) %}
	, getRowNodeId: {{ grid.vars.getRowNodeId }}
	{% endif %}
	{% if grid.vars.rowHeight is defined and grid.vars.rowHeight is not same as(null) %}
	, rowHeight: {{ grid.vars.rowHeight|json_encode|raw }}
	{% endif %}
	{% if grid.vars.getRowStyle is defined and grid.vars.getRowStyle is not same as(null) %}
	, getRowStyle: {% if grid.vars.getRowStyle starts with 'function' %}{{ grid.vars.getRowStyle|raw }}{% else %}StingerSoftAggrid.Styler.getStyler({{ grid.vars.getRowStyle|json_encode|raw }}){% endif %}
	{% endif %}
	{% if grid.vars.rowClass is defined and grid.vars.rowClass is not same as(null) %}
	, rowClass: {{ grid.vars.rowClass|json_encode|raw }}
	{% endif %}
	{% if grid.vars.getRowClass is defined and grid.vars.getRowClass is not same as(null) %}
	, getRowClass: {% if grid.vars.getRowClass starts with 'function' %}{{ grid.vars.getRowClass|raw }}{% else %}StingerSoftAggrid.Styler.getStyler({{ grid.vars.getRowClass|json_encode|raw }}){% endif %}
	{% endif %}
	{% if grid.vars.rowClassRules is defined and grid.vars.rowClassRules is not same as(null) %}
	, rowClassRules: {{ me.deserializeOptionArray(grid.vars.rowClassRules) }}
	{% endif %}
	{% if grid.vars.icons is defined and grid.vars.icons is not same as(null) %}
		, icons: {{ grid.vars.icons|json_encode|raw }}
	{% endif %}
	{% if grid.vars.suppressCsvExport is defined and grid.vars.suppressCsvExport is not same as(null) %}
	, suppressCsvExport: {{ grid.vars.suppressCsvExport|json_encode|raw }}
	{% endif %}
	{% if grid.vars.suppressExcelExport is defined and grid.vars.suppressExcelExport is not same as(null) %}
	, suppressExcelExport: {{ grid.vars.suppressExcelExport|json_encode|raw }}
	{% endif %}
	{% if grid.vars.pagination %}
		, pagination: true
	{% endif %}
	{% if grid.vars.paginationPageSize is defined and grid.vars.paginationPageSize is not same as(null) %}
		, paginationPageSize: {{ grid.vars.paginationPageSize|json_encode|raw }}
	{% endif %}
	{% if grid.vars.paginationAutoPageSize is defined and grid.vars.paginationAutoPageSize is not same as(null) %}
		, paginationAutoPageSize: {{ grid.vars.paginationAutoPageSize|json_encode|raw }}
	{% endif %}
	{% if grid.vars.paginationAutoPageSize is defined and grid.vars.suppressPaginationPanel is not same as(null) %}
		, suppressPaginationPanel: {{ grid.vars.paginationAutoPageSize|json_encode|raw }}
	{% endif %}
	{% if grid.vars.domLayout is defined and grid.vars.domLayout %}
		, domLayout: {{ grid.vars.domLayout|json_encode|raw }}
	{% endif %}
	{% if grid.vars.dataMode == 'inline' %}
		, rowData: {{ grid.inlineData|raw }}
	{% endif %}
	{% if grid.vars.rowSelection is defined and grid.vars.rowSelection is not same as(null) %}
		, rowSelection: {{ grid.vars.rowSelection|json_encode|raw }}
	{% endif %}
	{% if grid.vars.rowMultiSelectWithClick is defined and grid.vars.rowMultiSelectWithClick is not same as(false) %}
		, rowMultiSelectWithClick: {{ grid.vars.rowMultiSelectWithClick|json_encode|raw }}
	{% endif %}
	{% if grid.vars.suppressRowClickSelection is defined and grid.vars.suppressRowClickSelection is not same as(false) %}
		, suppressRowClickSelection: {{ grid.vars.suppressRowClickSelection|json_encode|raw }}
	{% endif %}
	{% if grid.vars.dataMode == 'enterprise' %}
		, rowModelType: 'serverSide'
		, cacheBlockSize: {{ grid.vars.cacheBlockSize|json_encode|raw }}
		, blockLoadDebounceMillis: 500
	{% endif %}
	{% if grid.vars.treeData %}
		, treeData: true,
        getDataPath: function (data) {
	        return data.orgHierarchy.value;
		},
	    autoGroupColumnDef: {
	        headerName: "Group",
            filter: true,
            resizable: true,
            valueGetter: function(params) {
	            return '';
	        }
	    }
	{% endif %}
	, onGridReady: function(params) {
		{{ varAggrid }}.load(params.columnApi, params.api);
		{% if grid.vars.autoResizeColumns is defined and grid.vars.autoResizeColumns is not same as(false) %}
			{% if grid.vars.autoResizeColumns == constant('\\StingerSoft\\AggridBundle\\Grid\\GridType::COLUMN_AUTO_SIZE_TO_FIT') %}
				{{ varAggrid }}.getGridApi().sizeColumnsToFit();
			{% elseif grid.vars.autoResizeColumns == constant('\\StingerSoft\\AggridBundle\\Grid\\GridType::COLUMN_AUTO_SIZE_ALL') %}
				{{ varAggrid }}.autoSizeColumns(true);
			{% endif %}
		{% endif %}
	}
	{% if app.request.locale != 'en' %}
	, localeTextFunc: function(key, defaultValue) {
		var gridKey = 'stingersoft_aggrid.' + key;
		var value = Translator.trans(gridKey, {}, 'StingerSoftAggridBundle');
		if(value === gridKey) {
			console.warn('falling back to default value "' + defaultValue + '", as no translation was found for "' + key + '" (tried "' + gridKey + '" within the domain "StingerSoftAggridBundle"!');
			return defaultValue;
		}
		return value;
		return value === gridKey ? defaultValue : value;
	}
	{% endif %}
	, onColumnResized: function(params) {
		var length = params.columns.length;
		for (var i = 0; i < length; i++) {
			{{ varAggrid }}.addResizedColumn(params.columns[i]);
		}
	}
}