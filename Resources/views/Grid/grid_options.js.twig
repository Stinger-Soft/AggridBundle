{
	{% block grid_def_start %}
	{% endblock grid_def_start %}
	{% import '@StingerSoftAggrid/Grid/macros.html.twig' as me %}
	columnDefs: [
	{% for column in grid.columns %}
		{% include column.template with {'column': column} %}{% if not loop.last %},{% endif %}
	{% endfor %}
	],
	multiSortKey: 'ctrl',
	enableBrowserTooltips: {{ grid.vars.enableBrowserTooltips|json_encode|raw }},
	components: {
		datePicker: StingerSoftAggrid.Editor.DatePicker
	}
	{% if grid.vars.rowStyle is defined and grid.vars.rowStyle is not same as(null) %}
	, rowStyle: {{ grid.vars.rowStyle|json_encode|raw }}
	{% endif %}
	{% if grid.vars.getRowNodeId is defined and grid.vars.getRowNodeId is not same as(null) %}
	, getRowNodeId: {{ grid.vars.getRowNodeId }}
	{% endif %}
	{% if grid.vars.rowHeight is defined and grid.vars.rowHeight is not same as(null) %}
	, rowHeight: {{ grid.vars.rowHeight|json_encode|raw }}
	{% endif %}
	{% if grid.vars.getRowStyle is defined and grid.vars.getRowStyle is not same as(null) %}
	, getRowStyle: StingerSoftAggrid.Styler.getStyler({{ grid.vars.getRowStyle|json_encode|raw }})
	{% endif %}
	{% if grid.vars.rowClass is defined and grid.vars.rowClass is not same as(null) %}
	, rowClass: {{ grid.vars.rowClass|json_encode|raw }}
	{% endif %}
	{% if grid.vars.getRowClass is defined and grid.vars.getRowClass is not same as(null) %}
	, getRowClass: StingerSoftAggrid.Styler.getStyler({{ grid.vars.getRowClass|json_encode|raw }})
	{% endif %}
	{% if grid.vars.rowClassRules is defined and grid.vars.rowClassRules is not same as(null) %}
	, rowClassRules: {{ me.deserializeOptionArray(grid.vars.rowClassRules) }}
	{% endif %}
	{% if grid.vars.icons is defined and grid.vars.icons is not same as(null) %}
		, icons: {{ grid.vars.icons|json_encode|raw }}
	{% endif %}
	{% if grid.vars.suppressCsvExport is defined and grid.vars.suppressCsvExport is not same as(null) %}
	, suppressCsvExport: {{ grid.vars.suppressCsvExport|json_encode|raw }}
	{% endif %}
	{% if grid.vars.suppressExcelExport is defined and grid.vars.suppressExcelExport is not same as(null) %}
	, suppressExcelExport: {{ grid.vars.suppressExcelExport|json_encode|raw }}
	{% endif %}
	{% if grid.vars.pagination %}
		, pagination: true
	{% endif %}
	{% if grid.vars.paginationPageSize is defined and grid.vars.paginationPageSize is not same as(null) %}
		, paginationPageSize: {{ grid.vars.paginationPageSize|json_encode|raw }}
	{% endif %}
	{% if grid.vars.paginationAutoPageSize is defined and grid.vars.paginationAutoPageSize is not same as(null) %}
		, paginationAutoPageSize: {{ grid.vars.paginationAutoPageSize|json_encode|raw }}
	{% endif %}
	{% if grid.vars.paginationAutoPageSize is defined and grid.vars.suppressPaginationPanel is not same as(null) %}
		, suppressPaginationPanel: {{ grid.vars.paginationAutoPageSize|json_encode|raw }}
	{% endif %}
	{% if grid.vars.domLayout is defined and grid.vars.domLayout %}
		, domLayout: {{ grid.vars.domLayout|json_encode|raw }}
	{% endif %}
	{% if grid.vars.dataMode == 'inline' %}
		, rowData: {{ grid.inlineData|raw }}
	{% endif %}
	{% if grid.vars.sideBar != false %}
		, sideBar: {{ grid.vars.sideBar|json_encode|raw }}
	{% endif %}
	{% if grid.vars.rowSelection is defined and grid.vars.rowSelection is not same as(null) %}
		, rowSelection: {{ grid.vars.rowSelection|json_encode|raw }}
	{% endif %}
	{% if grid.vars.rowMultiSelectWithClick is defined and grid.vars.rowMultiSelectWithClick is not same as(false) %}
		, rowMultiSelectWithClick: {{ grid.vars.rowMultiSelectWithClick|json_encode|raw }}
	{% endif %}
	{% if grid.vars.suppressRowClickSelection is defined and grid.vars.suppressRowClickSelection is not same as(false) %}
		, suppressRowClickSelection: {{ grid.vars.suppressRowClickSelection|json_encode|raw }}
	{% endif %}
	{% if grid.vars.dataMode == 'enterprise' %}
		, rowModelType: 'serverSide'
		, cacheBlockSize: {{ grid.vars.cacheBlockSize|json_encode|raw }}
		, blockLoadDebounceMillis: 500
	{% endif %}
	{% if grid.vars.treeData %}
		, treeData: true,
		getDataPath: function (data) {
			return data.orgHierarchy;
		},
		autoGroupColumnDef: {
			headerName: "Path",
			filter: true,
			resizable: true,
			valueGetter: function(params) {
				var label = params.node.key;
				if(label.includes('$$')) {
					label = label.split('$$')[1];
				}
				return label;
			}
		}
	{% endif %}
	, onGridReady: function(params) {
		{{ varAggrid }}.load(params.columnApi, params.api);
	}
	{% if app.request.locale != 'en' %}
	, localeTextFunc: function(key, defaultValue) {
		var gridKey = 'stingersoft_aggrid.' + key;
		var value = Translator.trans(gridKey, {}, 'StingerSoftAggridBundle');
		return value === gridKey ? defaultValue : value;
	}
	{% endif %}
	, onColumnResized: function(params) {
		var length = params.columns.length;
		for (var i = 0; i < length; i++) {
			{{ varAggrid }}.addResizedColumn(params.columns[i]);
		}
	}
}